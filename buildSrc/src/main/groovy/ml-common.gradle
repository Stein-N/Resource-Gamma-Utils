plugins {
    id 'java-library'
}

base {
    archivesName = "$mod_id-$project.name"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven { url 'https://maven.parchmentmc.org/' }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.1.0'
}

tasks.named('javadoc', Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_author,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_author
        ])
    }
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }
}

processResources {
    var expandProps = [
            // Project related Keys
            "version": version,
            "group": project.group,

            //Mod related Keys
            "mod_name": mod_name,
            "mod_author": mod_author,
            "mod_id": mod_id,
            "mod_license": mod_license,
            "mod_credits": mod_credits,
            "mod_description": mod_description,

            // Fabric Keys
            "fabric_loader_version": fabric_loader_version,
            "fabric_api_version": fabric_api_version,

            // NeoForge Keys
            "neoforge_version": neoforge_version,
            "neoforge_version_range": neoforge_version_range,

            // Forge Keys
            "forge_version": forge_version,
            "forge_version_range": forge_version_range
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/neoforge.mods.toml', 'META-INF/mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}